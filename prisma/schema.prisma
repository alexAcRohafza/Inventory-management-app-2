generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  role     String
  name     String?
  access   String[] @default([]) // Additional access permissions array
  
  notifications Notification[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vendor {
  id      String @id @default(uuid())
  name    String
  contact String
  email   String?
  address String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id      String @id @default(uuid())
  name    String
  address String
  
  areas Area[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Area {
  id         String @id @default(uuid())
  name       String
  locationId String
  
  location     Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  storageUnits StorageUnit[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StorageUnit {
  id     String @id @default(uuid())
  name   String
  areaId String
  
  area  Area   @relation(fields: [areaId], references: [id], onDelete: Cascade)
  items Item[]
  
  // For inventory movements tracking
  movementsFrom InventoryMovement[] @relation("FromStorageUnit")
  movementsTo   InventoryMovement[] @relation("ToStorageUnit")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id            String  @id @default(uuid())
  name          String
  description   String?
  quantity      Int     @default(0)
  price         Float?
  sku           String? @unique
  storageUnitId String
  
  // Additional fields as mentioned in instructions
  batchId       String?
  condition     String  @default("good") // good, damaged, expired
  damage        String? // damage description if condition is damaged
  
  storageUnit        StorageUnit         @relation(fields: [storageUnitId], references: [id], onDelete: Cascade)
  inventoryMovements InventoryMovement[]
  damageReports      DamageReport[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryMovement {
  id                  String   @id @default(uuid())
  itemId              String
  quantity            Int
  movementType        String   // IN, OUT, TRANSFER, ADJUSTMENT
  fromStorageUnitId   String?
  toStorageUnitId     String?
  notes               String?
  movementDate        DateTime @default(now())
  
  item            Item         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  fromStorageUnit StorageUnit? @relation("FromStorageUnit", fields: [fromStorageUnitId], references: [id])
  toStorageUnit   StorageUnit? @relation("ToStorageUnit", fields: [toStorageUnitId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  type      String   // NotificationType enum values
  userId    String
  message   String
  read      Boolean  @default(false)
  metadata  String?  // JSON string for additional data
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, read])
  @@index([createdAt])
}

model Report {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String   // inventory, movement, analytics
  data        String   // JSON string of report data
  filters     String?  // JSON string of applied filters
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DamageReport {
  id          String   @id @default(uuid())
  itemId      String
  description String
  severity    String   // minor, major, critical
  reportedBy  String   // user who reported
  status      String   @default("open") // open, investigating, resolved
  
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SiteMap {
  id          String @id @default(uuid())
  name        String
  description String?
  layout      String // JSON string of map layout
  
  allocations MapAllocation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MapAllocation {
  id            String @id @default(uuid())
  siteMapId     String
  storageUnitId String
  x             Float  // X coordinate on map
  y             Float  // Y coordinate on map
  
  siteMap     SiteMap     @relation(fields: [siteMapId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([siteMapId, storageUnitId])
} 